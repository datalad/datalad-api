"""
A command performs at least one action.
"""

from collections.abc import (
    Mapping,
)
from dataclasses import dataclass
from enum import Enum
from pathlib import Path
from typing import (
    Any,
)


# TODO: Could be `StrEnum`, came with PY3.11
class ActionStatus(Enum):
    """Enumeration of possible statuses of command actions
    """
    ok = 'ok'
    notneeded = 'notneeded'
    impossible = 'impossible'
    error = 'error'


@dataclass(kw_only=True)
class Message:
    """"""
    subid: str | None = None
    """Identifier for the subject of a message.

    The semantics of this field will vary across subclasses.
    """
    message: str | tuple[str, Mapping[str, Any]] | None = None
    """Message text.

    If a tuple, the first item is a message template string, and the
    second item a mapping of keyword interpolation parameters.
    """


@dataclass(kw_only=True)
class ProgressUpdate(Message):
    """Message emitted to indicate activity of a task

    It is advisable to use a derivative class for more informative progress
    updates, if possible.

    The `subid` field indicates the identifier of the process the progress
    report is about.
    """


@dataclass(kw_only=True)
class QuantitativeProgressUpdate(ProgressUpdate):
    """Message emitted to report amount of progress made with a task
    """
    completed: float
    """Current progress (amount)"""
    total: float | None = None
    """Amount of progress needed for a task to be fully completed.

    Must match unit/semantics of ``completed``.
    """


@dataclass(kw_only=True)
class ActionResult(Message):
    """Message on workflow-related outcomes

    The `subid` field indicates the identifier of action this result
    was generated by.

    This message type contains a ``status`` property that can be used to
    implement workflow control mechanisms (e.g., continue-after-error).

    In case of an error-result, the ``message`` property is used to
    communicate an error message.
    """
    status: ActionStatus
    """Classification of the result, see ``ActionStatus``"""
    # This is using proper exceptions, not "CapturedException". It is the
    # responsibility of a result handler to strip any exception from
    # any unwanted references (traceback, frames, etc.) -- rather than
    # the responsibility of any and all client code issuing such a message.
    exception: Exception | None = None
    """Exception that occurred while generating a result."""


@dataclass(kw_only=True)
class PathActionResult(ActionResult):
    """Message on a action result targeting a particular file system path
    """
    path: Path
    """Path that is the subject of an action result.

    While ``subid`` continues to identify the underlying action. This
    path identifies the target of an action on the file system.

    The reference for a relative path is always the current process
    working directory.
    """
    # TODO: add (path-)`type`?


# TODO: possibility to extend with more context (think `refds` property of
# legacy result records
#@dataclass(kw_only=True)
#class WorktreePathActionResult(ActionResult):
